diff -Nur origin/eval.py code/eval.py
--- origin/eval.py	2022-11-02 17:55:22.768000000 +0800
+++ code/eval.py	2022-11-02 17:55:22.784000000 +0800
@@ -101,6 +101,16 @@
     tokenizer = Tokenizer(vocab, bpe_codes, 'en', 'de')
     scores = bleu_calculate(tokenizer, result_npy_addr, test_tgt)
     print(f"BLEU scores is :{scores}")
+    ACC_DIR = os.getenv("RESULT_PATH")
+    if ACC_DIR is None:
+        print("Warning: The environment variable 'RESULT_PATH' is not set. ")
+    elif not os.path.isdir(ACC_DIR):
+        print("Warning: The environment variable 'RESULT_PATH' is not a valid directory. ")
+    else:
+        print("ACC_DIR:", ACC_DIR)
+        ACC_LOG = os.path.join(ACC_DIR, "eval_acc.log")
+        with open(ACC_LOG, 'w') as f:
+            f.write("{}".format(scores))
 
 if __name__ == '__main__':
     run_eval()
diff -Nur origin/train.py code/train.py
--- origin/train.py	2022-11-02 17:55:22.776000000 +0800
+++ code/train.py	2022-11-02 17:55:22.784000000 +0800
@@ -41,6 +41,12 @@
 from model_utils.config import config as default_config
 from model_utils.moxing_adapter import moxing_wrapper
 from model_utils.device_adapter import get_device_id, get_device_num
+try:
+   import ais_utils
+except ImportError:
+   ais_utils_is_existed = False
+else:
+   ais_utils_is_existed = True
 
 def _train(model, config,
            pre_training_dataset=None, fine_tune_dataset=None, test_dataset=None,
@@ -222,11 +228,35 @@
         callbacks.append(summary_callback)
 
     print(f" | ALL SET, PREPARE TO TRAIN.")
+    model.build(dataset, sink_size=dataset.get_dataset_size(), epoch=config.epochs)
+
+    if ais_utils_is_existed:
+        start_time = ais_utils.get_datatime()
+    else:
+        start_time = time.time()
     _train(model=model, config=config,
            pre_training_dataset=pre_training_dataset,
            fine_tune_dataset=fine_tune_dataset,
            test_dataset=test_dataset,
            callbacks=callbacks)
+    all_data_sum = config.epochs * dataset.get_dataset_size() * config.batch_size
+    if ais_utils_is_existed:
+        end_time = ais_utils.get_datatime()
+        throughput_rate = ais_utils.calc_throughput_rate(all_data_sum, start_time, end_time)
+    else:
+        end_time = time.time()
+        throughput_rate = all_data_sum / (end_time - start_time)
+
+    rank_id = int(os.getenv('RANK_ID'))
+    THROUGHPUT_DIR = os.getenv("RESULT_PATH")
+    if THROUGHPUT_DIR is None:
+        print("Warning: The environment variable 'RESULT_PATH' is not set. ")
+    elif not os.path.isdir(THROUGHPUT_DIR):
+        print("Warning: The environment variable 'RESULT_PATH' is not a valid directory. ")
+    else:
+        THROUGHPUT_LOG = os.path.join(THROUGHPUT_DIR, "throughput_rank_{}".format(rank_id))
+        with open(THROUGHPUT_LOG, 'w') as f:
+            f.write("{}".format(throughput_rate))
 
 
 def _setup_parallel_env():
